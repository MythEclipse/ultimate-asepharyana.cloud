# =================================================================
# AUTHENTICATION SYSTEM - ENVIRONMENT CONFIGURATION
# =================================================================
# Copy this file to .env and update with your actual values
# =================================================================

# =================================================================
# DATABASE CONFIGURATION
# =================================================================
DATABASE_URL=mysql://username:password@localhost:3306/database_name
# Example: mysql://root:mypassword@localhost:3306/auth_system

# =================================================================
# REDIS CONFIGURATION (Token Blacklisting)
# =================================================================
REDIS_URL=redis://localhost:6379
# For Redis with password: redis://:password@localhost:6379
# For Redis Cloud: redis://username:password@host:port

# =================================================================
# JWT CONFIGURATION
# =================================================================
JWT_SECRET=your-super-secret-jwt-key-minimum-32-characters-long-change-this
# IMPORTANT: Use a strong random string in production!
# Generate with: openssl rand -base64 32

# =================================================================
# EMAIL CONFIGURATION
# =================================================================
# Leave SMTP_PASSWORD empty for development mode (emails logged to console)
# Set SMTP_PASSWORD to enable production email sending

# --- Gmail Configuration (Recommended for Development) ---
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USERNAME=your-email@gmail.com
SMTP_PASSWORD=
# To enable: Generate App Password from Google Account Security Settings
# SMTP_PASSWORD=abcd efgh ijkl mnop

FROM_EMAIL=your-email@gmail.com
FROM_NAME=Your App Name

# --- SendGrid Configuration (Recommended for Production) ---
# SMTP_HOST=smtp.sendgrid.net
# SMTP_PORT=587
# SMTP_USERNAME=apikey
# SMTP_PASSWORD=your-sendgrid-api-key
# FROM_EMAIL=verified-sender@yourdomain.com
# FROM_NAME=Your App

# --- AWS SES Configuration (Enterprise) ---
# SMTP_HOST=email-smtp.us-east-1.amazonaws.com
# SMTP_PORT=587
# SMTP_USERNAME=your-ses-smtp-username
# SMTP_PASSWORD=your-ses-smtp-password
# FROM_EMAIL=verified@yourdomain.com
# FROM_NAME=Your App

# --- Custom SMTP Server ---
# SMTP_HOST=mail.yourdomain.com
# SMTP_PORT=587
# SMTP_USERNAME=noreply@yourdomain.com
# SMTP_PASSWORD=your-smtp-password
# FROM_EMAIL=noreply@yourdomain.com
# FROM_NAME=Your App

# =================================================================
# APPLICATION CONFIGURATION
# =================================================================
APP_URL=http://localhost:3000
# Production: https://yourdomain.com

# =================================================================
# SERVER CONFIGURATION (Optional)
# =================================================================
HOST=0.0.0.0
PORT=3000

# =================================================================
# LOGGING CONFIGURATION (Optional)
# =================================================================
RUST_LOG=info
# Options: trace, debug, info, warn, error

# =================================================================
# SETUP INSTRUCTIONS
# =================================================================
#
# 1. Copy this file to .env:
#    cp .env.example .env
#
# 2. Update database credentials:
#    - Create MySQL database
#    - Update DATABASE_URL with your credentials
#
# 3. Run database migrations:
#    cd apps/rust
#    sqlx migrate run
#
# 4. For development (no real emails):
#    - Leave SMTP_PASSWORD empty
#    - Emails will be logged to console
#
# 5. For production (real emails):
#    - Configure SMTP settings
#    - Set SMTP_PASSWORD
#    - Test email sending
#
# 6. Generate strong JWT secret:
#    openssl rand -base64 32
#
# 7. Start server:
#    cargo run --bin rust
#
# =================================================================
# GMAIL SETUP GUIDE
# =================================================================
#
# 1. Enable 2-Factor Authentication:
#    - Go to myaccount.google.com/security
#    - Enable 2-Step Verification
#
# 2. Generate App Password:
#    - Go to myaccount.google.com/apppasswords
#    - Select "Mail" and your device
#    - Copy the 16-character password
#
# 3. Update configuration:
#    SMTP_USERNAME=yourname@gmail.com
#    SMTP_PASSWORD=xxxx xxxx xxxx xxxx  (remove spaces)
#    FROM_EMAIL=yourname@gmail.com
#
# =================================================================
# SENDGRID SETUP GUIDE
# =================================================================
#
# 1. Create SendGrid account: https://sendgrid.com/
#
# 2. Verify sender email:
#    - Settings > Sender Authentication
#    - Verify Single Sender
#    - Use this email as FROM_EMAIL
#
# 3. Create API Key:
#    - Settings > API Keys
#    - Create API Key with "Mail Send" permissions
#
# 4. Update configuration:
#    SMTP_HOST=smtp.sendgrid.net
#    SMTP_USERNAME=apikey
#    SMTP_PASSWORD=SG.xxxxxxxxxxxxx
#    FROM_EMAIL=verified-sender@yourdomain.com
#
# =================================================================
# SECURITY NOTES
# =================================================================
#
# ⚠️  IMPORTANT:
# - Never commit .env file to git
# - Use strong JWT_SECRET in production
# - Rotate JWT_SECRET periodically
# - Use app-specific passwords for Gmail
# - Keep SMTP credentials secure
# - Enable HTTPS in production
# - Set restrictive CORS policy
#
# Add to .gitignore:
# .env
# .env.local
# .env.production
#
# =================================================================
