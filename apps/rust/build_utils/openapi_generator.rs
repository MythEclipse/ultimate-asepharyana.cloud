use std::collections::{ HashMap, HashSet };
use std::fs;
use std::path::Path;
use anyhow::Result;
use crate::build_utils::handler_updater::HandlerRouteInfo;

pub fn generate_root_api_mod(
  api_routes_path: &Path,
  modules: &[String],
  all_handlers: &[HandlerRouteInfo],
  schemas: &HashSet<String>
) -> Result<()> {
  let mut content = String::from(
    "//! THIS FILE IS AUTOMATICALLY GENERATED BY build.rs\n//! DO NOT EDIT THIS FILE MANUALLY\n\n"
  );
  content.push_str(
    "use axum::Router;\nuse std::sync::Arc;\nuse utoipa::OpenApi;\nuse crate::routes::AppState;\n\n"
  );

  for module in modules {
    content.push_str(&format!("pub mod {};\n", module));
  }
  content.push_str("\n");

  let all_paths: Vec<String> = all_handlers
    .iter()
    .map(|h| format!("        {}::{}", h.handler_module_path, h.func_name))
    .collect();

  let mut sorted_schemas: Vec<String> = schemas.iter().cloned().collect();
  sorted_schemas.sort();

  // Generate `use` imports for each fully-qualified schema path and collect simple type names for components.
  // Handle duplicate type names by using aliases
  let mut type_name_count: HashMap<String, usize> = HashMap::new();
  let mut use_lines: Vec<String> = Vec::new();
  let mut simple_names: Vec<String> = Vec::new();

  for full in &sorted_schemas {
    let simple_name = full.split("::").last().unwrap().to_string();
    let count = type_name_count.entry(simple_name.clone()).or_insert(0);
    *count += 1;

    if *count > 1 {
      // Use alias for duplicates
      let alias = format!("{} as {}_{}", full, simple_name.to_lowercase(), *count - 1);
      use_lines.push(format!("use {};", alias));
      simple_names.push(format!("{}_{}", simple_name.to_lowercase(), *count - 1));
    } else {
      use_lines.push(format!("use {};", full));
      simple_names.push(simple_name);
    }
  }

  content.push_str(
    &format!(
      "{}\n#[derive(OpenApi)]\n#[openapi(\n    paths(\n{}\n    ),\n    components(schemas({})),\n    tags((\n        name = \"api\", description = \"Main API\"\n    ))\n)]\n#[allow(dead_code)]\npub struct ApiDoc;\n\n",
      use_lines.join("\n"),
      all_paths.join(",\n"),
      simple_names.join(", ")
    )
  );

  let router_registrations = modules
    .iter()
    .map(|m| format!("    router = {}::register_routes(router);", m))
    .collect::<Vec<_>>()
    .join("\n");

  content.push_str(
    &format!("pub fn create_api_routes() -> Router<Arc<AppState>> {{\n    let router = Router::new();\n{}\n    router\n}}\n", router_registrations)
  );

  fs::write(api_routes_path.join("mod.rs"), content)?;
  Ok(())
}
