//! THIS FILE IS AUTOMATICALLY GENERATED BY build.rs
//! DO NOT EDIT THIS FILE MANUALLY

// --- METADATA UNTUK BUILD.RS ---
const ENDPOINT_METHOD: &str = "GET";
const ENDPOINT_PATH: &str = "/api/komik/detail/{slug}";
const ENDPOINT_DESCRIPTION: &str = "Get details for a komik.";
const ENDPOINT_TAG: &str = "komik";
const SUCCESS_RESPONSE_BODY: &str = "DetailResponse";
const SLUG_DESCRIPTION: &str = "The slug of the komik.";
// --- AKHIR METADATA ---

use axum::{
    extract::Path,
    response::{IntoResponse, Response},
    Json,
};
use serde::{Deserialize, Serialize};
use utoipa::ToSchema;

#[derive(Serialize, ToSchema)]
#[serde(rename_all = "camelCase")]
pub struct DetailData {
    pub message: String,
    pub slug: String,
}

#[derive(Serialize, ToSchema)]
#[serde(rename_all = "camelCase")]
pub struct DetailResponse {
    pub status: &'static str,
    pub data: DetailData,
}

/// Get details for a komik
#[utoipa::path(
    get,
    path = "/api/komik/detail/{slug}",
    tag = "komik",
    responses(
        (status = 200, description = "Success", body = DetailResponse),
        (status = 500, description = "Internal Server Error")
    ),
    params(
        ("slug" = String, Path, description = SLUG_DESCRIPTION)
    )
)]
pub fn DETAIL_HANDLER_UTOIPA() {}

pub async fn detail_handler(Path(slug): Path<String>) -> Response {
    let response_data = DetailData {
        message: format!("Data for komik detail: {}", slug),
        slug: slug.clone(),
    };

    let response = DetailResponse {
        status: "Ok",
        data: response_data,
    };

    Json(response).into_response()
}


pub fn register_routes(router: Router<Arc<ChatState>>) -> Router<Arc<ChatState>> {
    router.route(ENDPOINT_PATH, axum::routing::GET(detail_handler))
}