//! THIS FILE IS AUTOMATICALLY GENERATED BY build.rs
//! DO NOT EDIT THIS FILE MANUALLY

use utoipa::OpenApi;
use axum::Router;
use crate::routes::ChatState;
use std::sync::Arc;

pub mod anime;
pub mod anime2;
pub mod chat;
pub mod compress;
pub mod drivepng;
pub mod komik;
pub mod proxy;
pub mod uploader;

/// Aggregates OpenAPI docs for all API groups.
#[derive(OpenApi)]
#[openapi(
    tags(
        (name = "api", description = "Root API module")
    ),
    nest(
        (path = "/anime", api = anime::AnimeApiDoc),
        (path = "/anime2", api = anime2::Anime2ApiDoc),
        (path = "/chat", api = chat::ChatApiDoc),
        (path = "/compress", api = compress::CompressApiDoc),
        (path = "/drivepng", api = drivepng::DrivePngApiDoc),
        (path = "/komik", api = komik::KomikApiDoc),
        (path = "/proxy", api = proxy::ProxyApiDoc),
        (path = "/uploader", api = uploader::UploaderApiDoc)
    )
)]
pub struct ApiDoc;

pub fn create_api_routes() -> Router<Arc<ChatState>> {
    let mut router = Router::new();
    router = router.nest("/anime", anime::create_routes());
    router = router.nest("/anime2", anime2::create_routes());
    router = router.nest("/chat", chat::create_routes());
    router = router.nest("/compress", compress::create_routes());
    router = router.nest("/drivepng", drivepng::create_routes());
    router = router.nest("/komik", komik::create_routes());
    router = router.nest("/proxy", proxy::create_routes());
    router = router.nest("/uploader", uploader::create_routes());
    router
}
