name: Deploy ElysiaJS to VPS

on:
  workflow_dispatch: # Manual trigger
  push:
    branches:
      - main
    paths:
      - 'apps/elysia/**'
      - '.github/workflows/deploy-elysia.yml'

jobs:
  build-and-deploy-elysia:
    name: Build and Deploy ElysiaJS
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Get Bun cache directory
        id: bun-cache
        shell: bash
        run: |
          echo "BUN_INSTALL_CACHE_DIR=$(bun pm cache)" >> $GITHUB_OUTPUT

      - name: Setup Bun cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.bun-cache.outputs.BUN_INSTALL_CACHE_DIR }}
          key: ${{ runner.os }}-bun-${{ hashFiles('apps/elysia/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Prepare .env file for production
        env:
          ENV_FILE_PRODUCTION: ${{ secrets.ELYSIA_ENV_FILE_PRODUCTION }}
        run: |
          if [ -n "$ENV_FILE_PRODUCTION" ]; then
            echo "$ENV_FILE_PRODUCTION" > apps/elysia/.env
          fi

      - name: Install Dependencies
        working-directory: apps/elysia
        run: bun install --frozen-lockfile

      - name: Sync Build Artifacts to VPS
        env:
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_KEY" > /tmp/deploy_key && chmod 600 /tmp/deploy_key

          # Sync source files
          rsync -avz --progress --delete -e "ssh -o StrictHostKeyChecking=no -i /tmp/deploy_key" \
            apps/elysia/src/ \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.VPS_TARGET_DIR }}/apps/elysia/src/

          # Sync package.json
          rsync -avz -e "ssh -o StrictHostKeyChecking=no -i /tmp/deploy_key" \
            apps/elysia/package.json \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.VPS_TARGET_DIR }}/apps/elysia/package.json

          # Sync ecosystem config
          rsync -avz -e "ssh -o StrictHostKeyChecking=no -i /tmp/deploy_key" \
            apps/elysia/ecosystem.config.cjs \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.VPS_TARGET_DIR }}/apps/elysia/ecosystem.config.cjs

          # Sync .env file
          rsync -avz -e "ssh -o StrictHostKeyChecking=no -i /tmp/deploy_key" \
            apps/elysia/.env \
            ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.VPS_TARGET_DIR }}/apps/elysia/.env

          rm -f /tmp/deploy_key

      - name: Deploy on VPS
        env:
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_KEY" > /tmp/deploy_key && chmod 600 /tmp/deploy_key
          ssh -o StrictHostKeyChecking=no -i /tmp/deploy_key ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} '
            # Set up the environment
            export PATH=$PATH:/root/.local/share/pnpm
            export PATH=$PATH:/home/asephs/.nvm/versions/node/v22.17.1/bin
            export PATH=$PATH:/home/asephs/.bun/bin
            export PATH="$HOME/.cargo/bin:$PATH"

            # Navigate to the app directory
            cd ${{ secrets.VPS_TARGET_DIR }}/apps/elysia

            # Pull the latest code (optional, as rsync is the source of truth)
            git reset --hard origin/main || true

            # Install production dependencies
            bun install --production

            # Restart the application with PM2
            pm2 startOrRestart ecosystem.config.cjs

            echo "ElysiaJS Deployment successful!"
          '
          rm -f /tmp/deploy_key
