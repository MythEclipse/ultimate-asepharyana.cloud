name: Deploy Rust to VPS

on:
  workflow_dispatch: # Manual trigger
  push:
    branches:
      - main
    paths:
      - 'apps/rust/**'
      - 'libs/rust/**'
      - '.github/workflows/deploy-rust.yml'

jobs:
  build-and-deploy-rust:
    name: Build and Deploy Rust
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache APT packages
        uses: actions/cache@v3
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/deploy-rust.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Install System Dependencies
        run: >
          sudo apt-get update && sudo apt-get install -y
          mingw-w64
          build-essential
          pkg-config
          cmake
          clang
          libclang-dev
          libsqlite3-dev
          libmysqlclient-dev
          libssl-dev
          libjpeg-dev
          libpng-dev
          libavcodec-dev
          libavformat-dev
          libavutil-dev
          libswscale-dev
          libavfilter-dev
          libavdevice-dev
          libswresample-dev
          libpostproc-dev

      - name: Prepare .env file for production
        env:
          ENV_FILE_PRODUCTION: ${{ secrets.ENV_FILE_PRODUCTION }}
        run: |
          if [ -n "$ENV_FILE_PRODUCTION" ]; then
            echo "$ENV_FILE_PRODUCTION" > .env
          fi

      - name: Setup Env
        run: bash ./scripts/2updateenv.sh

      - name: Build Rust
        env:
          BINDGEN_EXTRA_CLANG_ARGS: '-I/usr/include/x86_64-linux-gnu'
        run: cargo build --release --manifest-path apps/rust/Cargo.toml --target-dir apps/rust/target

      - name: Check Build Output
        run: |
          echo "Rust build output:" && ls -l apps/rust/target/release
          if [ ! -f "apps/rust/target/release/rust" ]; then
            echo "ERROR: Rust build output executable not found. Deployment aborted."
            exit 1
          fi

      - name: Copy .env to all subprojects/packages
        run: bash scripts/2updateenv.sh

      - name: Sync Build Artifacts to VPS
        env:
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_KEY" > /tmp/deploy_key && chmod 600 /tmp/deploy_key

          # Sync all .env files
          find . -type f -name ".env" | while read file; do
            target="${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.VPS_TARGET_DIR }}/${file#./}"
            rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no -i /tmp/deploy_key" "$file" "$target"
          done

          # Sync Rust binary
          ssh -o StrictHostKeyChecking=no -i /tmp/deploy_key ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "mkdir -p ${{ secrets.VPS_TARGET_DIR }}/apps/rust/target/release"
          rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no -i /tmp/deploy_key" apps/rust/target/release/rust ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.VPS_TARGET_DIR }}/apps/rust/target/release/rust

          rm -f /tmp/deploy_key

      - name: Deploy on VPS
        env:
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_KEY" > /tmp/deploy_key && chmod 600 /tmp/deploy_key
          ssh -o StrictHostKeyChecking=no -i /tmp/deploy_key ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} '
            # Set up the environment
            export PATH=$PATH:/root/.local/share/pnpm
            export PATH=$PATH:/home/asephs/.nvm/versions/node/v22.17.1/bin
            export PATH=$PATH:/home/asephs/.bun/bin/bun
            export PATH="$HOME/.cargo/bin:$PATH"

            # Navigate to the app directory and update
            cd ${{ secrets.VPS_TARGET_DIR }}/apps/rust
            git reset --hard origin/main
            bash scripts/2updateenv.sh

            # Load environment variables
            export $(cat .env | grep -v "^#" | xargs)

            # Parse DATABASE_URL
            if [[ $DATABASE_URL =~ mysql://([^:]+):([^@]+)@([^:/]+)(:([0-9]+))?/(.+) ]]; then
              DB_USER="${BASH_REMATCH[1]}"
              DB_PASS="${BASH_REMATCH[2]}"
              DB_HOST="${BASH_REMATCH[3]}"
              DB_PORT="${BASH_REMATCH[5]:-3306}"
              DB_NAME="${BASH_REMATCH[6]}"

              # Step 1: Ensure all tables exist (safe with IF NOT EXISTS)
              if [ -f "ensure-chat-tables.sql" ]; then
                echo "Ensuring chat tables exist..."
                mysql -h "$DB_HOST" -P "$DB_PORT" -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" < ensure-chat-tables.sql 2>/dev/null || echo "Table creation completed"
              fi

              # Step 2: Clean migration history for fresh re-run
              if [ -f "fix-migrations.sql" ]; then
                echo "Cleaning migration history for fresh start..."
                mysql -h "$DB_HOST" -P "$DB_PORT" -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" < fix-migrations.sql 2>/dev/null || echo "Migration cleanup completed"
              fi
            fi

            # Restart the application with PM2
            pm2 startOrRestart rust.config.cjs

            echo "Rust Deployment successful!"
          '
          rm -f /tmp/deploy_key
