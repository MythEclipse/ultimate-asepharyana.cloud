name: Deploy RustExpress to VPS

on:
  push:
    branches:
      - main
    paths:
      - 'apps/RustExpress/**'
      - '.github/workflows/deploy-rust.yml' # Trigger if this workflow file changesa

# Hardcoded path, tidak perlu secreta
env:
  VPS_TARGET_DIR: /home/azureuser/ultimate-asepharyana.cloud

jobs:
  build-and-deploy-rust:
    name: Build and Deploy RustExpress
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build RustExpress
        run: cargo build --release --manifest-path apps/RustExpress/Cargo.toml

      - name: Check Build Output
        run: |
          echo "RustExpress build output:" && ls -l target/release
          if [ ! -f "target/release/RustExpress" ]; then
            echo "ERROR: RustExpress build output executable not found. Deployment aborted."
            exit 1
          fi

      - name: SSH into VPS and Prepare RustExpress Directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ env.VPS_TARGET_DIR }}
            mkdir -p apps/RustExpress/target/release

      - name: Sync RustExpress Build Artifacts to VPS
        env:
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_KEY" > /tmp/deploy_key && chmod 600 /tmp/deploy_key
          rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no -i /tmp/deploy_key" target/release/RustExpress ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ env.VPS_TARGET_DIR }}/apps/RustExpress/target/release/RustExpress
          rm -f /tmp/deploy_key

      - name: SSH into VPS and Deploy RustExpress
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            export PATH="$HOME/.cargo/bin:$PATH" # Add cargo bin to PATH
            cd ${{ env.VPS_TARGET_DIR }}
            # Check if the process is running and stop it
            if pgrep -x "rust_express" > /dev/null; then
              killall rust_express
              echo "Existing rust_express process stopped."
            fi
            # Start the new binary in the background
            nohup target/release/RustExpress > rust_express.log 2>&1 &
            echo "RustExpress Deployment successful!"