name: Deploy Rust to VPS

on:
  push:
    branches:
      - main
    paths:
      - 'apps/rust/**'
      - '.github/workflows/deploy-rust.yml' # Trigger if this workflow file changesaa

jobs:
  build-and-deploy-rust:
    name: Build and Deploy Rust
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Prepare .env file for production
        env:
          ENV_FILE_PRODUCTION: ${{ secrets.ENV_FILE_PRODUCTION }}
        run: |
          if [ -n "$ENV_FILE_PRODUCTION" ]; then
            echo "$ENV_FILE_PRODUCTION" > .env
          fi

      - name: Setup Env
        run: bash ./2updateenv.sh

      - name: Build Rust
        run: cargo build --release --manifest-path apps/rust/Cargo.toml

      - name: Check Build Output
        run: |
          echo "Rust build output:" && ls -l apps/rust/target/release
          if [ ! -f "apps/rust/target/release/rust" ]; then
            echo "ERROR: Rust build output executable not found. Deployment aborted."
            exit 1
          fi

      - name: Copy .env to all subprojects/packages
        run: bash 2updateenv.sh

      - name: Sync all .env files to VPS
        env:
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_KEY" > /tmp/deploy_key && chmod 600 /tmp/deploy_key
          find . -type f -name ".env" | while read file; do
            target="${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.VPS_TARGET_DIR }}/${file#./}"
            rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no -i /tmp/deploy_key" "$file" "$target"
          done
          rm -f /tmp/deploy_key

      - name: Sync Rust Build Artifacts to VPS
        env:
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_KEY" > /tmp/deploy_key && chmod 600 /tmp/deploy_key
          rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no -i /tmp/deploy_key" apps/rust/target/release/rust ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.VPS_TARGET_DIR }}/apps/rust/target/release/rust
          rm -f /tmp/deploy_key

      - name: SSH into VPS and Deploy Rust
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            export PATH=$PATH:/root/.local/share/pnpm
            export PATH=$PATH:/home/asephs/.nvm/versions/node/v22.17.1/bin
            export PATH=$PATH:/home/asephs/.bun/bin/bun
            export PATH="$HOME/.cargo/bin:$PATH"
            cd ${{ secrets.VPS_TARGET_DIR }}
            git pull
            bash 2updateenv.sh
            # Check if the process is running and stop it
            pm2 startOrRestart ${{ secrets.VPS_TARGET_DIR }}/apps/rust/ecosystem.config.cjs
            echo "Rust Deployment successful!"
